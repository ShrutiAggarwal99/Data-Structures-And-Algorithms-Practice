//Link for reference : https://www.geeksforgeeks.org/dijkstras-shortest-path-algorithm-using-priority_queue-stl/
//Need to fing the bug : giving TLE
#include<bits/stdc++.h>
using namespace std;

class Graph{
  int V;
  vector<vector<pair<int,int> > > adjList;
  
public:
  
  Graph(int V){
    this->V=V;
    for(int i=0;i<V;i++){
      vector<pair<int,int> > v;
      adjList.push_back(v);
    }
  }
  
  void addEdge(int u, int v, int wt){
    adjList[u].push_back({v,wt});
    adjList[v].push_back({u,wt});
  }
  
  
  void printGraph(){
    for(int i=0;i<V;i++){
        cout<<i<<" -> ";
        for(auto it=adjList[i].begin();it!=adjList[i].end();it++){
            cout<<it->first<<", ";
        }
        cout<<endl;
    }
  }
  
  void shortestPaths(int startVertex){
    //DIJKSTRA ALGORITHM
    
    vector<int> dists(V,INT_MAX);
    vector<bool> finalised(V,false);
    priority_queue<pair<int,int>,vector<pair<int,int> >,greater<pair<int,int> > > pq;  //MIN HEAP
    pq.push({0,startVertex});
    dists[startVertex]=0;
    
    while(!pq.empty()){
        cout<<"here";
      while(finalised[pq.top().second]==true){
        pq.pop();
      }
      cout<<"here";
      int minDistVertex=pq.top().second;
      pq.pop();
      finalised[minDistVertex]=true;
      
      for(auto it=adjList[minDistVertex].begin(); it!=adjList[minDistVertex].end(); it++){
        int nbr=it->first;
        int wt=it->second;
          if (finalised[nbr] == false && dists[nbr] > dists[minDistVertex] + wt){
            // Updating distance of v
            dists[nbr] = dists[minDistVertex] + wt;
              pq.push({dists[nbr],nbr});
        }
      }
    }
      
    
    for(int i=0;i<V;i++){
        cout<<i<<" "<<dists[i]<<endl;
    }
    
  }
  
};

int main(){
  int V=9;
  Graph g(V);
  g.addEdge(0, 1, 4); 
  g.addEdge(0, 7, 8); 
  g.addEdge(1, 2, 8); 
  g.addEdge(1, 7, 11); 
  g.addEdge(2, 3, 7); 
  g.addEdge(2, 8, 2); 
  g.addEdge(2, 5, 4); 
  g.addEdge(3, 4, 9); 
  g.addEdge(3, 5, 14); 
  g.addEdge(4, 5, 10); 
  g.addEdge(5, 6, 2); 
  g.addEdge(6, 7, 1); 
  g.addEdge(6, 8, 6); 
  g.addEdge(7, 8, 7); 
  
  g.printGraph();
  
  g.shortestPaths(0);
  
  return 0;
}
